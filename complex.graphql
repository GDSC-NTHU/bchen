#######################
# Input Schema
#######################

interface User {
	id: ID!
	name: String!
	isEnable: Boolean!
}

type Viewer implements User {
	id: ID!
	name: String!
	isEnable: Boolean!
	subscribers(filter: YoutuberFilter, order: YoutuberOrder, first: Int, offset: Int): [Youtuber]
	watchlist(filter: VideoFilter, order: VideoOrder, first: Int, offset: Int): [Video]
	subscribersAggregate(filter: YoutuberFilter): YoutuberAggregateResult
	watchlistAggregate(filter: VideoFilter): VideoAggregateResult
}

type Youtuber implements User {
	id: ID!
	name: String!
	isEnable: Boolean!
	subscribes: Int!
	videos(filter: VideoFilter, order: VideoOrder, first: Int, offset: Int): [Video]
	videosAggregate(filter: VideoFilter): VideoAggregateResult
}

type Video {
	title: String!
	views: Int!
	producer(filter: YoutuberFilter): Youtuber!
	likes: Int!
	dislikes: Int!
	description: String!
	comments(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	commentsAggregate(filter: CommentFilter): CommentAggregateResult
}

type Comment {
	poster(filter: UserFilter): User!
	comment: String!
	likes(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	likesAggregate(filter: UserFilter): UserAggregateResult
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddCommentPayload {
	comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	numUids: Int
}

type AddVideoPayload {
	video(filter: VideoFilter, order: VideoOrder, first: Int, offset: Int): [Video]
	numUids: Int
}

type AddViewerPayload {
	viewer(filter: ViewerFilter, order: ViewerOrder, first: Int, offset: Int): [Viewer]
	numUids: Int
}

type AddYoutuberPayload {
	youtuber(filter: YoutuberFilter, order: YoutuberOrder, first: Int, offset: Int): [Youtuber]
	numUids: Int
}

type CommentAggregateResult {
	count: Int
	commentMin: String
	commentMax: String
}

type DeleteCommentPayload {
	comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	msg: String
	numUids: Int
}

type DeleteUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	msg: String
	numUids: Int
}

type DeleteVideoPayload {
	video(filter: VideoFilter, order: VideoOrder, first: Int, offset: Int): [Video]
	msg: String
	numUids: Int
}

type DeleteViewerPayload {
	viewer(filter: ViewerFilter, order: ViewerOrder, first: Int, offset: Int): [Viewer]
	msg: String
	numUids: Int
}

type DeleteYoutuberPayload {
	youtuber(filter: YoutuberFilter, order: YoutuberOrder, first: Int, offset: Int): [Youtuber]
	msg: String
	numUids: Int
}

type UpdateCommentPayload {
	comment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	numUids: Int
}

type UpdateUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type UpdateVideoPayload {
	video(filter: VideoFilter, order: VideoOrder, first: Int, offset: Int): [Video]
	numUids: Int
}

type UpdateViewerPayload {
	viewer(filter: ViewerFilter, order: ViewerOrder, first: Int, offset: Int): [Viewer]
	numUids: Int
}

type UpdateYoutuberPayload {
	youtuber(filter: YoutuberFilter, order: YoutuberOrder, first: Int, offset: Int): [Youtuber]
	numUids: Int
}

type UserAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type VideoAggregateResult {
	count: Int
	titleMin: String
	titleMax: String
	viewsMin: Int
	viewsMax: Int
	viewsSum: Int
	viewsAvg: Float
	likesMin: Int
	likesMax: Int
	likesSum: Int
	likesAvg: Float
	dislikesMin: Int
	dislikesMax: Int
	dislikesSum: Int
	dislikesAvg: Float
	descriptionMin: String
	descriptionMax: String
}

type ViewerAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
}

type YoutuberAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	subscribesMin: Int
	subscribesMax: Int
	subscribesSum: Int
	subscribesAvg: Float
}

#######################
# Generated Enums
#######################

enum CommentHasFilter {
	poster
	comment
	likes
}

enum CommentOrderable {
	comment
}

enum UserHasFilter {
	name
	isEnable
}

enum UserOrderable {
	name
}

enum VideoHasFilter {
	title
	views
	producer
	likes
	dislikes
	description
	comments
}

enum VideoOrderable {
	title
	views
	likes
	dislikes
	description
}

enum ViewerHasFilter {
	name
	isEnable
	subscribers
	watchlist
}

enum ViewerOrderable {
	name
}

enum YoutuberHasFilter {
	name
	isEnable
	subscribes
	videos
}

enum YoutuberOrderable {
	name
	subscribes
}

#######################
# Generated Inputs
#######################

input AddCommentInput {
	poster: UserRef!
	comment: String!
	likes: [UserRef]
}

input AddVideoInput {
	title: String!
	views: Int!
	producer: YoutuberRef!
	likes: Int!
	dislikes: Int!
	description: String!
	comments: [CommentRef]
}

input AddViewerInput {
	name: String!
	isEnable: Boolean!
	subscribers: [YoutuberRef]
	watchlist: [VideoRef]
}

input AddYoutuberInput {
	name: String!
	isEnable: Boolean!
	subscribes: Int!
	videos: [VideoRef]
}

input CommentFilter {
	has: [CommentHasFilter]
	and: [CommentFilter]
	or: [CommentFilter]
	not: CommentFilter
}

input CommentOrder {
	asc: CommentOrderable
	desc: CommentOrderable
	then: CommentOrder
}

input CommentPatch {
	poster: UserRef
	comment: String
	likes: [UserRef]
}

input CommentRef {
	poster: UserRef
	comment: String
	likes: [UserRef]
}

input UpdateCommentInput {
	filter: CommentFilter!
	set: CommentPatch
	remove: CommentPatch
}

input UpdateUserInput {
	filter: UserFilter!
	set: UserPatch
	remove: UserPatch
}

input UpdateVideoInput {
	filter: VideoFilter!
	set: VideoPatch
	remove: VideoPatch
}

input UpdateViewerInput {
	filter: ViewerFilter!
	set: ViewerPatch
	remove: ViewerPatch
}

input UpdateYoutuberInput {
	filter: YoutuberFilter!
	set: YoutuberPatch
	remove: YoutuberPatch
}

input UserFilter {
	id: [ID!]
	has: [UserHasFilter]
	and: [UserFilter]
	or: [UserFilter]
	not: UserFilter
}

input UserOrder {
	asc: UserOrderable
	desc: UserOrderable
	then: UserOrder
}

input UserPatch {
	name: String
	isEnable: Boolean
}

input UserRef {
	id: ID!
}

input VideoFilter {
	has: [VideoHasFilter]
	and: [VideoFilter]
	or: [VideoFilter]
	not: VideoFilter
}

input VideoOrder {
	asc: VideoOrderable
	desc: VideoOrderable
	then: VideoOrder
}

input VideoPatch {
	title: String
	views: Int
	producer: YoutuberRef
	likes: Int
	dislikes: Int
	description: String
	comments: [CommentRef]
}

input VideoRef {
	title: String
	views: Int
	producer: YoutuberRef
	likes: Int
	dislikes: Int
	description: String
	comments: [CommentRef]
}

input ViewerFilter {
	id: [ID!]
	has: [ViewerHasFilter]
	and: [ViewerFilter]
	or: [ViewerFilter]
	not: ViewerFilter
}

input ViewerOrder {
	asc: ViewerOrderable
	desc: ViewerOrderable
	then: ViewerOrder
}

input ViewerPatch {
	name: String
	isEnable: Boolean
	subscribers: [YoutuberRef]
	watchlist: [VideoRef]
}

input ViewerRef {
	id: ID
	name: String
	isEnable: Boolean
	subscribers: [YoutuberRef]
	watchlist: [VideoRef]
}

input YoutuberFilter {
	id: [ID!]
	has: [YoutuberHasFilter]
	and: [YoutuberFilter]
	or: [YoutuberFilter]
	not: YoutuberFilter
}

input YoutuberOrder {
	asc: YoutuberOrderable
	desc: YoutuberOrderable
	then: YoutuberOrder
}

input YoutuberPatch {
	name: String
	isEnable: Boolean
	subscribes: Int
	videos: [VideoRef]
}

input YoutuberRef {
	id: ID
	name: String
	isEnable: Boolean
	subscribes: Int
	videos: [VideoRef]
}

#######################
# Generated Query
#######################

type Query {
	getUser(id: ID!): User
	queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	aggregateUser(filter: UserFilter): UserAggregateResult
	getViewer(id: ID!): Viewer
	queryViewer(filter: ViewerFilter, order: ViewerOrder, first: Int, offset: Int): [Viewer]
	aggregateViewer(filter: ViewerFilter): ViewerAggregateResult
	getYoutuber(id: ID!): Youtuber
	queryYoutuber(filter: YoutuberFilter, order: YoutuberOrder, first: Int, offset: Int): [Youtuber]
	aggregateYoutuber(filter: YoutuberFilter): YoutuberAggregateResult
	queryVideo(filter: VideoFilter, order: VideoOrder, first: Int, offset: Int): [Video]
	aggregateVideo(filter: VideoFilter): VideoAggregateResult
	queryComment(filter: CommentFilter, order: CommentOrder, first: Int, offset: Int): [Comment]
	aggregateComment(filter: CommentFilter): CommentAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	updateUser(input: UpdateUserInput!): UpdateUserPayload
	deleteUser(filter: UserFilter!): DeleteUserPayload
	addViewer(input: [AddViewerInput!]!): AddViewerPayload
	updateViewer(input: UpdateViewerInput!): UpdateViewerPayload
	deleteViewer(filter: ViewerFilter!): DeleteViewerPayload
	addYoutuber(input: [AddYoutuberInput!]!): AddYoutuberPayload
	updateYoutuber(input: UpdateYoutuberInput!): UpdateYoutuberPayload
	deleteYoutuber(filter: YoutuberFilter!): DeleteYoutuberPayload
	addVideo(input: [AddVideoInput!]!): AddVideoPayload
	updateVideo(input: UpdateVideoInput!): UpdateVideoPayload
	deleteVideo(filter: VideoFilter!): DeleteVideoPayload
	addComment(input: [AddCommentInput!]!): AddCommentPayload
	updateComment(input: UpdateCommentInput!): UpdateCommentPayload
	deleteComment(filter: CommentFilter!): DeleteCommentPayload
}

